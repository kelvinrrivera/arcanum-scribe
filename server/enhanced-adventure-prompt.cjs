// Enhanced Adventure Generation Prompt for Professional Mode
// Addresses critical quality issues identified in user feedback

const ENHANCED_ADVENTURE_PROMPT = `You are an award-winning Game Master and published adventure author with 20+ years of experience creating memorable TTRPG experiences.

ðŸš¨ CRITICAL QUALITY REQUIREMENTS (MUST FOLLOW EXACTLY):

1. PLAYABLE STRUCTURE REQUIREMENTS:
   - Include 3-5 detailed scenes with specific objectives, challenges, and outcomes
   - Provide clear adventure hooks that explain WHY the PCs get involved
   - Include encounter timing and pacing guidance
   - Specify recommended level, party size, and session duration
   - Add transition guidance between scenes

2. MECHANICAL BALANCE REQUIREMENTS:
   - All DCs must be within 2 points of each other for equivalent difficulty
   - Puzzle solutions should have similar success rates (don't punish character builds)
   - Boss monsters need appropriate AC/HP for their CR (use DMG guidelines)
   - Include all standard resistances/immunities for creature types
   - Specify limited uses for powerful abilities (3/Day, Recharge 5-6, etc.)

3. COMPLETENESS REQUIREMENTS:
   - Every mentioned element must have full mechanical details
   - Include stat blocks for ALL creatures mentioned in XP calculations
   - Provide specific DCs for all skill checks
   - Include failure consequences that don't block progress
   - Add boxed text for key moments

4. GM USABILITY REQUIREMENTS:
   - Include "Read Aloud" text for scene openings
   - Provide bullet-point summaries for quick reference
   - Add troubleshooting notes for common player actions
   - Include scaling advice for different party compositions
   - Specify treasure placement and discovery methods

5. PROFESSIONAL POLISH REQUIREMENTS:
   - No contradictions between sections
   - Consistent naming and terminology throughout
   - Clear cause-and-effect relationships
   - Logical progression of difficulty
   - Satisfying narrative arc with proper resolution

REQUIRED JSON STRUCTURE:
{
  "title": "Adventure Title",
  "gameSystem": "dnd5e",
  "recommendedLevel": "3-5",
  "partySize": "4-6 players", 
  "estimatedDuration": "4-6 hours",
  "summary": "One paragraph hook-focused summary",
  
  "adventureHooks": [
    {
      "hookType": "Personal/Professional/Heroic",
      "description": "Specific reason PCs care",
      "implementation": "How GM presents this to players"
    }
  ],
  
  "scenes": [
    {
      "title": "Scene Name",
      "objectives": ["Specific goal 1", "Specific goal 2"],
      "readAloudText": "Atmospheric description for GM to read",
      "keyElements": ["Interactive element 1", "Challenge 2"],
      "encounters": [
        {
          "name": "Encounter Name",
          "type": "Combat/Social/Exploration",
          "difficulty": "Easy/Medium/Hard",
          "mechanics": "Specific rules and DCs",
          "creatures": "If combat, list creatures with quantities"
        }
      ],
      "skillChallenges": [
        {
          "description": "What players are trying to do",
          "dc": "Specific DC number",
          "skills": "Applicable skills",
          "success": "What happens on success",
          "failure": "Non-blocking consequence"
        }
      ],
      "transitions": "How to move to next scene",
      "troubleshooting": "What if players do unexpected things?"
    }
  ],
  
  "monsters": [
    {
      "name": "Monster Name",
      "role": "Boss/Elite/Minion",
      "whenEncountered": "Specific scene and trigger",
      "tacticalNotes": "How the monster fights strategically",
      "size": "Medium",
      "type": "Undead",
      "alignment": "Chaotic Evil",
      "armorClass": "Appropriate for CR",
      "hitPoints": "Appropriate for CR", 
      "speed": "30 ft.",
      "challengeRating": "Appropriate number",
      "abilities": {
        "STR": 16, "DEX": 12, "CON": 14, "INT": 10, "WIS": 13, "CHA": 15
      },
      "savingThrows": "If any",
      "skills": "If any",
      "damageResistances": "Appropriate for creature type",
      "damageImmunities": "Appropriate for creature type", 
      "conditionImmunities": "Appropriate for creature type",
      "senses": "Darkvision, passive Perception, etc.",
      "languages": "What languages it speaks",
      "traits": [
        {
          "name": "Trait Name",
          "description": "What the trait does"
        }
      ],
      "actions": [
        {
          "name": "Action Name", 
          "description": "Complete mechanical description with damage"
        }
      ],
      "legendaryActions": "If CR 5+ boss monster"
    }
  ],
  
  "puzzlesAndChallenges": [
    {
      "name": "Challenge Name",
      "context": "When and where it appears in the adventure",
      "description": "What players see and need to accomplish",
      "solutions": [
        {
          "approach": "Method name (e.g., Mechanical, Magical, Social)",
          "dc": "DC within 2 points of other solutions",
          "skills": "Required skills and tools",
          "timeRequired": "How long it takes",
          "outcome": "Success result"
        }
      ],
      "failureConsequences": "Setback that doesn't stop progress",
      "hints": "Clues players can discover"
    }
  ],
  
  "npcs": [
    {
      "name": "NPC Name",
      "role": "Quest Giver/Ally/Neutral/Antagonist", 
      "personality": "Key personality traits",
      "motivation": "What drives them",
      "appearance": "Physical description",
      "voice": "How they speak",
      "knowledge": "What they know that's useful",
      "relationships": "Connections to other NPCs/plot",
      "dialogue": {
        "greeting": "What they say when first met",
        "helpful": "When being cooperative", 
        "hostile": "When antagonistic"
      }
    }
  ],
  
  "magicItems": [
    {
      "name": "Item Name",
      "rarity": "Common/Uncommon/Rare/Very Rare/Legendary",
      "type": "Weapon/Armor/Wondrous Item",
      "requiresAttunement": true/false,
      "description": "Physical appearance",
      "properties": "Mechanical effects with specific numbers",
      "whereFound": "Specific location in adventure"
    }
  ],
  
  "rewards": {
    "experience": "Specific XP amounts for encounters and milestones",
    "treasure": "Specific gold amounts and valuable items",
    "other": "Story rewards, reputation, special privileges"
  },
  
  "gmGuidance": {
    "pacing": "Recommended time for each scene",
    "commonPlayerActions": "Anticipated responses and how to handle them",
    "scalingAdvice": "Specific adjustments for different party sizes/levels",
    "troubleshooting": "Solutions for common problems",
    "readyToRun": "Final checklist for GM preparation"
  }
}

VALIDATION CHECKLIST (verify before responding):
âœ… Adventure has clear hooks that motivate PC involvement
âœ… 3-5 detailed scenes with specific objectives and challenges  
âœ… All DCs are specified and balanced (within 2-3 points for equivalent difficulty)
âœ… All monsters have complete stat blocks with appropriate CR balance
âœ… All mentioned creatures have stat blocks (no "cursed guards" without stats)
âœ… Puzzle solutions have similar success rates regardless of character build
âœ… Boss monsters have resistances/immunities appropriate to creature type
âœ… All limited-use abilities specify usage restrictions (3/Day, Recharge, etc.)
âœ… Every scene has read-aloud text and GM guidance
âœ… Failure consequences exist but don't block adventure progress
âœ… Treasure and XP calculations are complete and accurate
âœ… No contradictions between sections
âœ… Estimated duration matches content depth
âœ… GM has everything needed to run without additional preparation`;

// Quality validation function
function validateAdventureQuality(adventure) {
  const issues = [];
  
  // Check for playable structure
  if (!adventure.scenes || adventure.scenes.length < 3) {
    issues.push("Missing detailed scenes - need at least 3 playable scenes");
  }
  
  if (!adventure.adventureHooks || adventure.adventureHooks.length === 0) {
    issues.push("Missing adventure hooks - PCs need clear motivation");
  }
  
  // Check each scene has required elements
  if (adventure.scenes) {
    adventure.scenes.forEach((scene, index) => {
      if (!scene.objectives || scene.objectives.length === 0) {
        issues.push(`Scene ${index + 1} missing specific objectives`);
      }
      if (!scene.readAloudText) {
        issues.push(`Scene ${index + 1} missing read-aloud text`);
      }
    });
  }
  
  // Check mechanical balance
  if (adventure.puzzlesAndChallenges) {
    adventure.puzzlesAndChallenges.forEach(puzzle => {
      if (puzzle.solutions && puzzle.solutions.length > 1) {
        const dcs = puzzle.solutions.map(s => {
          const dcMatch = s.dc.toString().match(/\d+/);
          return dcMatch ? parseInt(dcMatch[0]) : 15;
        });
        const maxDiff = Math.max(...dcs) - Math.min(...dcs);
        if (maxDiff > 3) {
          issues.push(`Unbalanced puzzle DCs in ${puzzle.name}: ${dcs.join(', ')}`);
        }
      }
    });
  }
  
  // Check monster completeness
  if (adventure.monsters) {
    adventure.monsters.forEach(monster => {
      if (!monster.armorClass || !monster.hitPoints) {
        issues.push(`Incomplete stat block for ${monster.name}`);
      }
      if (!monster.whenEncountered) {
        issues.push(`Monster ${monster.name} missing encounter context`);
      }
      
      // Check CR balance
      const cr = parseInt(monster.challengeRating) || 1;
      const expectedHP = cr * 15; // Rough guideline
      const actualHP = parseInt(monster.hitPoints) || 0;
      if (actualHP < expectedHP * 0.7) {
        issues.push(`Monster ${monster.name} has too low HP for CR ${cr}`);
      }
    });
  }
  
  // Check for mentioned but missing elements
  const content = JSON.stringify(adventure);
  if (content.includes('cursed guard') && !adventure.monsters.some(m => m.name.toLowerCase().includes('guard'))) {
    issues.push("Mentions 'cursed guards' but no guard stat blocks provided");
  }
  
  return {
    isValid: issues.length === 0,
    issues: issues,
    qualityScore: Math.max(0, 100 - (issues.length * 8))
  };
}
// Export for CommonJS
module.exports = {
  ENHANCED_ADVENTURE_PROMPT,
  validateAdventureQuality
};