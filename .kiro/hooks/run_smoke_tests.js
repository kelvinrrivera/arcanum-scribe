#!/usr/bin/env node
/**
 * Kiro Hook: Run Smoke Tests
 * 
 * Executes a focused suite of tests to validate system health and generates
 * a report. This demonstrates quality assurance in the Kiro workflow.
 */

import { execSync } from 'child_process';
import fs from 'fs';
import path from 'path';

const REPORTS_DIR = './.kiro/reports';

function runCommand(command, description) {
  console.log(`🔄 ${description}...`);
  try {
    const output = execSync(command, { 
      encoding: 'utf-8',
      stdio: ['inherit', 'pipe', 'pipe'],
      timeout: 30000 // 30 seconds max per command
    });
    console.log(`✅ ${description} - PASSED`);
    return { success: true, output, error: null };
  } catch (error) {
    console.log(`❌ ${description} - FAILED`);
    return { 
      success: false, 
      output: error.stdout || '', 
      error: error.stderr || error.message 
    };
  }
}

async function runSmokeTests() {
  console.log(`🧪 Kiro Hook: Running smoke tests suite`);
  
  const timestamp = new Date().toISOString();
  const results = {
    timestamp,
    tests: [],
    summary: { passed: 0, failed: 0, total: 0 }
  };
  
  // Test 1: TypeScript compilation
  const tscResult = runCommand('npx tsc --noEmit', 'TypeScript compilation check');
  results.tests.push({
    name: 'TypeScript Compilation',
    command: 'npx tsc --noEmit',
    ...tscResult
  });
  
  // Test 2: Lint check
  const lintResult = runCommand('npm run lint', 'ESLint code quality check');
  results.tests.push({
    name: 'ESLint Quality Check',
    command: 'npm run lint',
    ...lintResult
  });
  
  // Test 3: Unit tests (quality validation)
  const unitResult = runCommand('npm test tests/quality-validation-unit.test.ts', 'Quality validation unit tests');
  results.tests.push({
    name: 'Quality Validation Tests',
    command: 'npm test tests/quality-validation-unit.test.ts',
    ...unitResult
  });
  
  // Test 4: Server health check (if running)
  let healthResult;
  try {
    healthResult = runCommand('curl -f http://localhost:3000/api/health --max-time 5', 'Server health check');
  } catch (error) {
    healthResult = {
      success: false,
      output: '',
      error: 'Server not running or health endpoint unavailable'
    };
    console.log(`⚠️  Server health check - SKIPPED (server not running)`);
  }
  results.tests.push({
    name: 'Server Health Check',
    command: 'curl -f http://localhost:3000/api/health',
    ...healthResult
  });
  
  // Calculate summary
  results.tests.forEach(test => {
    results.summary.total++;
    if (test.success) {
      results.summary.passed++;
    } else {
      results.summary.failed++;
    }
  });
  
  // Generate report
  const reportName = `smoke_tests_${timestamp.replace(/[:.]/g, '-')}.json`;
  const reportPath = path.join(REPORTS_DIR, reportName);
  fs.writeFileSync(reportPath, JSON.stringify(results, null, 2));
  
  // Generate human-readable summary
  const summaryPath = path.join(REPORTS_DIR, `smoke_tests_summary_${timestamp.replace(/[:.]/g, '-')}.md`);
  const summary = generateSummary(results);
  fs.writeFileSync(summaryPath, summary);
  
  console.log(`\n📊 SMOKE TESTS SUMMARY:`);
  console.log(`   ✅ Passed: ${results.summary.passed}`);
  console.log(`   ❌ Failed: ${results.summary.failed}`);
  console.log(`   📊 Total:  ${results.summary.total}`);
  console.log(`   📈 Success Rate: ${(results.summary.passed / results.summary.total * 100).toFixed(1)}%`);
  console.log(`\n📁 Reports saved:`);
  console.log(`   JSON: ${reportPath}`);
  console.log(`   Summary: ${summaryPath}`);
  
  return {
    success: results.summary.failed === 0,
    passed: results.summary.passed,
    failed: results.summary.failed,
    total: results.summary.total,
    reportPath,
    summaryPath
  };
}

function generateSummary(results) {
  const { timestamp, tests, summary } = results;
  
  return `# Smoke Tests Report
  
**Generated:** ${timestamp}  
**Success Rate:** ${(summary.passed / summary.total * 100).toFixed(1)}% (${summary.passed}/${summary.total})

## Test Results

${tests.map(test => `
### ${test.name}
- **Status:** ${test.success ? '✅ PASSED' : '❌ FAILED'}
- **Command:** \`${test.command}\`
${test.error ? `- **Error:** ${test.error}` : ''}
${test.output && test.output.length < 500 ? `- **Output:** \`\`\`\n${test.output}\n\`\`\`` : ''}
`).join('\n')}

## Summary
- This report validates core system health
- Failed tests should be investigated before deployment
- Run individual commands manually for detailed debugging

---
*Generated by Kiro Hook: run_smoke_tests.js*
`;
}

// CLI execution
runSmokeTests().catch(console.error);